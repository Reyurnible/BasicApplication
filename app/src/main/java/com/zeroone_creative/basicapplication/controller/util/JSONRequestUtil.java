package com.zeroone_creative.basicapplication.controller.util;import android.util.Log;import com.android.volley.AuthFailureError;import com.android.volley.Request.Priority;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.Response.Listener;import com.android.volley.VolleyError;import com.zeroone_creative.basicapplication.controller.provider.CustomJSONRequest;import com.zeroone_creative.basicapplication.controller.provider.NetworkTaskCallback;import com.zeroone_creative.basicapplication.model.enumerate.NetworkTasks;import com.zeroone_creative.basicapplication.model.system.AppConfig;import org.json.JSONException;import org.json.JSONObject;import java.io.UnsupportedEncodingException;import java.util.HashMap;import java.util.Map;//ストアの一覧を取得public class JSONRequestUtil {    private NetworkTaskCallback mCallback;    private String mRequestFrom;    private Map<String, String> mHeaders = new HashMap<String, String>();    public JSONRequestUtil(final NetworkTaskCallback callback, final String requestFrom, Map<String, String> headers) {        this.mCallback = callback;        this.mRequestFrom = requestFrom;        if (headers != null) {            this.mHeaders = headers;        }    }    public void onRequest(RequestQueue mQueue, final Priority requestPriority, final String url, final NetworkTasks task) {        this.onRequest(mQueue, requestPriority, url, task, null);    }    public void onRequest(RequestQueue mQueue, final Priority requestPriority, final String url, final NetworkTasks task, JSONObject params) {        if (AppConfig.DEBUG) {            Log.d(this.getClass().getSimpleName(), url);        }        CustomJSONRequest request = new CustomJSONRequest(task.method, url, params, new Listener<JSONObject>() {            @Override            public void onResponse(JSONObject response) {                try {                    if (AppConfig.DEBUG) {                        Log.d(this.getClass().getSimpleName(), "response:" + response.toString());                    }                    mCallback.onSuccessNetworkTask(task.id, response);                } catch (IllegalStateException e) {                    e.printStackTrace();                }            }        },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        JSONObject response = null;                        try {                            String responseBody = new String(error.networkResponse.data, "utf-8");                            response = new JSONObject(responseBody);                        } catch (JSONException e) {                            e.printStackTrace();                        } catch (UnsupportedEncodingException e) {                            e.printStackTrace();                        } catch (NullPointerException e) {                            e.printStackTrace();                        }                        if (AppConfig.DEBUG) {                            if (response != null) {                                Log.d(this.getClass().getSimpleName(), "error response:" + response.toString());                            }                            Log.d(this.getClass().getSimpleName(), "error:" + error.toString());                        }                        try {                            mCallback.onFailedNetworkTask(task.id, response);                        } catch (IllegalStateException e) {                            e.printStackTrace();                        } catch (NullPointerException e) {                            e.printStackTrace();                        }                    }                }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                mHeaders.put("User-Agent", "Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Nexus S Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1");                //mHeaders.put("Content-Type","application/x-www-form-urlencoded");                //mHeaders.put("Content-Type", "application/json; charset=utf8");                return mHeaders;            }        };        request.setPriority(requestPriority);        request.setTag(mRequestFrom);        mQueue.add(request);    }}