package com.zeroone_creative.basicapplication.controller.util;import android.util.Log;import com.android.volley.AuthFailureError;import com.android.volley.Request.Priority;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.Response.Listener;import com.android.volley.VolleyError;import com.zeroone_creative.basicapplication.controller.provider.MultipartRequest;import com.zeroone_creative.basicapplication.controller.provider.NetworkTaskCallback;import com.zeroone_creative.basicapplication.model.enumerate.NetworkTasks;import com.zeroone_creative.basicapplication.model.system.AppConfig;import java.io.File;import java.io.UnsupportedEncodingException;import java.util.HashMap;import java.util.Map;//ストアの一覧を取得public class MultiPartRequestUtil {    private NetworkTaskCallback mCallback;    private String mRequestFrom;    private Map<String, String> mHeaders = new HashMap<String, String>();    public MultiPartRequestUtil(final NetworkTaskCallback callback, final String requestFrom, Map<String, String> headers) {        this.mCallback = callback;        this.mRequestFrom = requestFrom;        if (headers != null) {            this.mHeaders = headers;        }    }    public void onRequest(RequestQueue mQueue, final Priority requestPriority, final String url, final NetworkTasks task) {        this.onRequest(mQueue, requestPriority, url, task, new HashMap<String, String>(), new HashMap<String, File>());    }    public void onRequest(RequestQueue mQueue, final Priority requestPriority, final String url, final NetworkTasks task, Map<String, String> stringParts, Map<String, File> fileParts) {        if (AppConfig.DEBUG) Log.d(this.getClass().getSimpleName(), url);        MultipartRequest request = new MultipartRequest(url,                new Listener<String>() {                    @Override                    public void onResponse(String response) {                        try {                            if (AppConfig.DEBUG)                                Log.d(this.getClass().getSimpleName(), "response:" + response.toString());                            if (mCallback != null)                                mCallback.onSuccessNetworkTask(task.id, response);                        } catch (IllegalStateException e) {                            e.printStackTrace();                        }                    }                },                new Response.ErrorListener() {                    @Override                    public void onErrorResponse(VolleyError error) {                        String response = null;                        if (error != null) {                            response = error.toString();                            if (error.networkResponse != null && error.networkResponse.data != null) {                                try {                                    response = new String(error.networkResponse.data, "utf-8");                                } catch (UnsupportedEncodingException e) {                                    e.printStackTrace();                                }                            }                        }                        if (AppConfig.DEBUG)                            Log.d(this.getClass().getSimpleName(), "error:" + error.toString());                        try {                            if (mCallback != null) mCallback.onFailedNetworkTask(task.id, response);                        } catch (IllegalStateException e) {                            e.printStackTrace();                        }                    }                },                stringParts,                fileParts) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                mHeaders.put("User-Agent", "Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Nexus S Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1");                mHeaders.put("Content-Type", "multipart/form-data");                return mHeaders;            }        };        request.setPriority(requestPriority);        request.setTag(mRequestFrom);        mQueue.add(request);    }}