package com.zeroone_creative.basicapplication.controller.util;import android.graphics.Bitmap;import android.os.AsyncTask;import android.util.Log;import com.zeroone_creative.basicapplication.controller.provider.NetworkTaskCallback;import com.zeroone_creative.basicapplication.controller.provider.NetworkTasks;import com.zeroone_creative.basicapplication.model.system.AppConfig;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.NameValuePair;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.mime.HttpMultipartMode;import org.apache.http.entity.mime.MultipartEntity;import org.apache.http.entity.mime.content.ByteArrayBody;import org.apache.http.entity.mime.content.StringBody;import org.apache.http.impl.client.DefaultHttpClient;import org.json.JSONObject;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.nio.charset.Charset;import java.util.List;public class PostPictureRequestUtil extends AsyncTask<String, Integer, JSONObject>{    private NetworkTaskCallback mCallback;    private Bitmap mBitmap;    private NetworkTasks mTask;    private String mUrl;    private List<NameValuePair> mParams;        public PostPictureRequestUtil(final NetworkTasks task, final NetworkTaskCallback callback) {    	this.mTask = task;    	this.mCallback = callback;    }    public void onRequest(String url, List<NameValuePair> params, Bitmap bitmap) {        this.mUrl = url;        this.mParams = params;        this.mBitmap = bitmap;        this.execute();    }	@Override    protected JSONObject doInBackground(String... params){    	HttpClient httpClient = new DefaultHttpClient();    	HttpPost post = new HttpPost(mUrl);    	MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);    	try{    		ByteArrayBody bab = ImageUtil.toByteArrayBody(mBitmap);            entity.addPart("image",bab);            for(NameValuePair param : mParams){                entity.addPart(param.getName(), new StringBody(param.getValue(), Charset.forName("UTF-8")));            }            post.setEntity(entity);            post.addHeader("User-Agent","Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Nexus S Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1");            post.addHeader("Content-Type","multipart/form-data");    		HttpResponse response = httpClient.execute(post);    		int status = response.getStatusLine().getStatusCode();    		if (status == HttpStatus.SC_OK){    			ByteArrayOutputStream oStream = new ByteArrayOutputStream();    			response.getEntity().writeTo(oStream);                if(AppConfig.DEBUG){                    Log.d(this.getClass().getSimpleName(),oStream.toString());                }                return new JSONObject(oStream.toString());    		}else{    			return null;    		}    	} catch(IOException e) {    		e.printStackTrace();	  		Log.v("ERR","msg:" + e.getMessage());    	} catch(Exception e) {    		e.printStackTrace();    	}    	return null;    }    @Override    protected void onPostExecute(JSONObject object) {    	if (object!=null){    		mCallback.onSuccessNetworkTask(mTask.id, object);        }else{            mCallback.onFailedNetworkTask(mTask.id,null);        }    }      }